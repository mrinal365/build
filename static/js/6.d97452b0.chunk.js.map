{"version":3,"sources":["assets/data/trade-data.js","app/AnimatedPage.js","assets/logo_meta.72fa6a71.png","app/components/modals/CreateCompanyForm.js","app/components/home/Home.js"],"names":["SampleCompanies","id","wallet","comp","earned","worker","date","status","animations","initial","opacity","x","animate","exit","AnimatedPage","children","div","variants","transition","duration","module","exports","Home","company","dataFeeds","useWeb3React","account","library","chainId","useState","companyId","setCompanyId","setTotalCeos","setBnbPriceUSD","setTotalCompanies","setTotalInvested","chain","setChain","useEffect","console","log","res","Params","find","e","undefined","CompanyManagerAddress","chainIdHex","eth","Contract","companyAbi","EACAggregatorProxy","EACAggregatorProxyAddress","methods","getInfo","subscribe","_","getTotalCeos","call","then","getTotalFranchises","getTotalInvested","Number","Web3","utils","fromWei","toString","toFixed","getCompanyId","latestRoundData","className","style","backdropFilter","src","logo","Form","Control","type","placeholder","required","textAlign"],"mappings":"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","file":"static/js/6.d97452b0.chunk.js","sourcesContent":["const SampleCompanies = [\n   {\n      id: 0,\n      wallet: '0x22A...e6F8',\n      comp: 'TSLA',\n      earned: 1500,\n      worker: 78,\n      date: '20-06-2022',\n      status: 0\n   },\n   {\n      id: 1,\n      wallet: '0x5Y...e6F8',\n      comp: 'AUDI',\n      earned: 1000,\n      worker: 43,\n      date: '11-06-2022',\n      status: 1\n   },\n   {\n      id: 2,\n      wallet: '0x43F...h6T2',\n      comp: 'LENOVO',\n      earned: 2300,\n      worker: 23,\n      date: '15-06-2022',\n      status: 0\n   },\n   {\n      id: 3,\n      wallet: '0x21F...76h6',\n      comp: 'APPLE',\n      earned: 3000,\n      worker: 54,\n      date: '13-06-2022',\n      status: 1\n   },\n   {\n      id: 4,\n      wallet: '0xR2d...55t5',\n      comp: 'CHEVRON',\n      earned: 1200,\n      worker: 38,\n      date: '12-06-2022',\n      status: 1\n   },\n   {\n      id: 5,\n      wallet: '0x25A...hy54',\n      comp: 'COMCAST',\n      earned: 1000,\n      worker: 78,\n      date: '20-06-2022',\n      status: 0\n   },\n   {\n      id: 6,\n      wallet: '0x54h...ty5T',\n      comp: 'AUDI',\n      earned: 1600,\n      worker: 20,\n      date: '09-06-2022',\n      status: 0\n   },\n   {\n      id: 7,\n      wallet: '0x12F...h5Y6',\n      comp: 'LENOVO',\n      earned: 2300,\n      worker: 23,\n      date: '15-06-2022',\n      status: 0\n   },\n   {\n      id: 8,\n      wallet: '0xTG4...45y6',\n      comp: 'MICROSOFT',\n      earned: 3000,\n      worker: 54,\n      date: '13-06-2022',\n      status: 0\n   },\n   {\n      id: 9,\n      wallet: '0xhY6...55t5',\n      comp: 'HOME DEPOT',\n      earned: 1200,\n      worker: 38,\n      date: '22-06-2022',\n      status: 1\n   }\n];\n\nexport default SampleCompanies;","import { motion } from \"framer-motion\";\nimport * as React from \"react\";\n\nconst animations = {\n  initial: { opacity: 0, x: 100 },\n  animate: { opacity: 1, x: 0 },\n  exit: { opacity: 0, x: -100 },\n};\n\nconst AnimatedPage = ({ children }) => {\n  return (\n    <motion.div\n      variants={animations}\n      initial=\"initial\"\n      animate=\"animate\"\n      exit=\"exit\"\n      transition={{ duration: 1 }}\n    >\n      {children}\n    </motion.div>\n  );\n};\n\nexport default AnimatedPage;\n\n","module.exports = __webpack_public_path__ + \"static/media/logo_meta.72fa6a71.bd5b561c.png\";","/* eslint-disable no-unused-vars */\n/* eslint-disable array-callback-return */\nimport React, { useState } from \"react\";\nimport { Form, Spinner, Modal } from \"react-bootstrap\";\nimport toast from \"react-hot-toast\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport confirm from \"../../../assets/data/21052-checking.json\";\nimport spinner from \"../../../assets/data/28434-fc-spinner.json\";\nimport { injected, walletconnect } from \"../ConnectWalletButton\";\nimport {\n  toastSuccessParams,\n  toastErrorParams,\n} from \"../../../assets/data/toast-params\";\nimport { CompanyManagerAddress, NFTAddress } from \"../../blockchain/address\";\nimport companyManagerAbi from \"../../blockchain/abi/MetaCompanyManager.json\";\nimport Params from \"../../blockchain/chainParams\";\n\nimport LottieConf from \"./lottie-animation\";\nimport metamaskicon from '../../../assets/images/blockchain/metamask.png';\nimport walleticon from '../../../assets/images/blockchain/walletConnectIcon.svg';\nimport { ReactComponent as Close } from '../../../assets/images/x.svg';\n\nexport const CreateCompanyForm = ({ dis }) => {\n  const { active, account, library, activate, deactivate, chainId } = useWeb3React();\n  const [showModal, setShowModal] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const [showSpinner, setShowSpinner] = useState(true);\n  const [showConfirm, setShowConfirm] = useState(false);\n  const [tx, setTx] = useState(\"\");\n  const [spinnerCreate, setSpinnerCreate] = useState(false);\n  const [createAmount, setCreateAmount] = useState(1);\n  const [activatingConnector, setActivatingConnector] = useState();\n  let chain_hex\n\n  const handleSubmit = () => {\n    if (account) {\n      chain_hex = Params.find((e) => e.chainId == chainId).chainIdHex;\n      const companyManager = new library.eth.Contract(\n        companyManagerAbi,\n        CompanyManagerAddress[chain_hex]\n      ).methods;\n      setIsOpen(true);\n      setSpinnerCreate(true);\n      companyManager\n        .getCreateFranchisePriceBNB()\n        .call()\n        .then((res) => {\n          companyManager\n            .createMetaFranchiseUsingBNB(createAmount)\n            .send({ from: account, value: res * createAmount })\n            .then((r) => {\n              setTx(r.transactionHash);\n              toast.success(\n                \"Congratulations! Company created successfully.\",\n                toastSuccessParams\n              );\n              setShowSpinner(false);\n              setShowConfirm(true);\n              setSpinnerCreate(false);\n            })\n            .catch((error) => {\n              console.log(error);\n              setSpinnerCreate(false);\n              setIsOpen(false);\n              toast.error(\"Unable to create your company.\", toastErrorParams);\n            });\n        });\n    }\n  };\n\n  const closeModal = (_) => {\n    setShowConfirm(false);\n    setShowSpinner(true);\n    setIsOpen(false);\n  };\n\n  const onChangeCreateAmount = (val) => {\n    if (val > 0 && val <= 50) {\n      setCreateAmount(val);\n    }\n  };\n\n  const addToMetamask = async (_) => {\n    try {\n      chain_hex = Params.find((e) => e.chainId == chainId).chainIdHex;\n      // wasAdded is a boolean. Like any RPC method, an error may be thrown.\n      const wasAdded = await window.ethereum.request({\n        method: \"wallet_watchAsset\",\n        params: {\n          type: \"ERC20\", // Initially only supports ERC20, but eventually more!\n          options: {\n            // address: CompanyContract, // The address that the token is at.\n            address: NFTAddress[chain_hex], // The address that the nft token is at.\n            symbol: \"MSC\", // A ticker symbol or shorthand, up to 5 chars.\n            decimals: 0, // The number of decimals in the token\n          },\n        },\n      });\n      if (wasAdded) {\n        console.log(\"Thanks for your interest!\");\n      } else {\n        console.log(\"Your loss!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  async function connectMetamaks() {\n    try {\n      setActivatingConnector(\"injected\");\n      await activate(injected, undefined, true);\n      setShowModal(false);\n      localStorage.setItem(\"connector\", \"injected\")\n      localStorage.setItem(\"isWalletConnected\", true)\n    } catch (ex) {\n      toast.error(\"Please log into your wallet and select the Avalanche-C network\");\n    }\n  }\n  \n  async function connectWalletConnect() {\n    try {\n      const chain_params = Params.find((e) => e.chainId == chainId)\n      const config = walletconnect(chain_params)\n      setActivatingConnector(\"walletconnect\");\n      await activate(config, undefined, true);\n      setShowModal(false);\n      localStorage.setItem(\"connector\", \"walletConnect\")\n      localStorage.setItem(\"isWalletConnected\", true)\n    } catch (ex) {\n      //toast.error(\"Unable to connect! Are you on the right network?\");\n    }\n  }\n  // setName(target.value)\n  return (\n    <>\n      <div className=\"create-form\">\n        <div className=\"row\">\n          <div className=\"col-sm-12 text-center\">\n            <div className=\"d-flex d-sm-block d-md-flex align-items-center justify-content-around\">\n              <Form.Control\n                type=\"number\"\n                id=\"companies\"\n                placeholder=\"Number of companies\"\n                value={createAmount}\n                onChange={({ target }) => onChangeCreateAmount(target.value)}\n                required\n                style={{ textAlign: \"center\" }}\n              />\n            </div>\n          </div>\n          <div className=\"col-sm-12 text-center mt-2\">\n            {dis ? (\n              <button\n                type=\"button\"\n                className=\"btn btn-success mx-auto create-btn\"\n                onClick={handleSubmit}\n              >\n                {spinnerCreate && (\n                  <Spinner animation=\"border\" variant=\"success\" />\n                )}\n                <i className=\"mdi mdi-plus\"></i> Create Company\n              </button>\n            ) : (\n              <button\n                type=\"button\"\n                className=\"btn btn-success mx-auto create-btn\"\n                onClick={() => setShowModal(true)}\n              >\n                {spinnerCreate && (\n                  <Spinner animation=\"border\" variant=\"success\" />\n                )}\n                <i className=\"mdi mdi-wallet\"></i> Connect\n              </button>\n            )}\n          </div>\n          <div className=\"col-sm-12 text-center mt-2\">\n            <p>\n              You don't have the funds? <b>Check lending section</b>\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <Modal\n        show={isOpen}\n        onHide={() => closeModal()}\n        backdrop=\"static\"\n        keyboard={false}\n        animation={true}\n        centered\n      >\n        <Modal.Body className=\"create\">\n          {showSpinner && (\n            <>\n              <LottieConf loopEnable={true} confirmAnimation={spinner} />\n              <h6>Creating the company ...</h6>\n              <p>Confirm this transaction in your wallet </p>\n            </>\n          )}\n          {showConfirm && (\n            <>\n              <LottieConf loopEnable={false} confirmAnimation={confirm} />\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={`https://testnet.bscscan.com/tx/${tx}`}\n              >\n                View on BscScan\n              </a>\n              <button\n                onClick={addToMetamask}\n                type=\"button\"\n                className=\"btn btn-inverse-info mt-3\"\n              >\n                Add to metamask\n              </button>\n            </>\n          )}\n        </Modal.Body>\n        <Modal.Footer className=\"justify-content-around\">\n          <button\n            type=\"button\"\n            onClick={() => closeModal()}\n            className=\"btn btn-inverse-light\"\n          >\n            Close\n          </button>\n        </Modal.Footer>\n      </Modal>\n\n      <Modal\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        className=\"custom-modal connect\"\n        // overlayClassName=\"custom-overlay\"\n        // closeTimeoutMS={500}\n      >\n        <div className=\"shane_tm_modalbox_news connectWallet\">\n          <div onClick={() => setShowModal(false)} className=\"div-close\">\n            <Close />\n          </div>\n          <h3>Connect a wallet</h3>\n          <div className=\"modal_body\">\n            <div className=\"inner_body\">\n              <button onClick={connectMetamaks}>\n                <div className=\"metamask\">Metamask</div>\n                <div className=\"icon\">\n                  <img\n                    height={20}\n                    width={20}\n                    src={metamaskicon}\n                    alt=\"connect with metamask\"\n                  />\n                </div>\n              </button>\n              <button onClick={connectWalletConnect}>\n                <div className=\"walletconnect\">WalletConnect</div>\n                <div className=\"icon\">\n                  <img\n                    height={20}\n                    width={20}\n                    src={walleticon}\n                    alt=\"connect with walletConnect\"\n                  />\n                </div>\n              </button>\n            </div>\n          </div>\n        </div>\n      </Modal>\n    </>\n  );\n};\n\nexport default CreateCompanyForm;\n","/* eslint-disable jsx-a11y/accessible-emoji */\n/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport toast from \"react-hot-toast\";\nimport { Form, Spinner } from \"react-bootstrap\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport sampleCeos from \"../../../assets/data/slider-data\";\nimport sampleCompanies from \"../../../assets/data/trade-data\";\nimport AnimatedPage from \"../../AnimatedPage\";\nimport { data, options } from \"../../../assets/data/charts-data\";\nimport { CompanyManagerAddress } from \"../../blockchain/address\";\nimport { EACAggregatorProxyAddress } from \"../../blockchain/address\";\nimport companyAbi from \"../../blockchain/abi/MetaCompanyManager.json\";\nimport NFTMinting from \"../../blockchain/abi/NFTMintning.json\";\nimport EACAggregatorProxy from \"../../blockchain/abi/EACAggregatorProxy.json\";\nimport CreateCompanyForm from \"../modals/CreateCompanyForm\";\nimport { toastSuccessParams } from \"../../../assets/data/toast-params\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { VectorMap } from \"react-jvectormap\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Params from \"../../blockchain/chainParams\";\nimport logo from '../../../assets/logo_meta.72fa6a71.png';\n\nexport const Home = () => {\n  const { account, library, chainId } = useWeb3React();\n  const [tokenBalance, setTokenBalance] = useState(0);\n  // const [walletAddress, setWalletAddress] = useState(\"\");\n  const [companyId, setCompanyId] = useState(false);\n  const [totalCompaniesList, setTotalCompaniesList] = useState([]);\n  const [totalCeos, setTotalCeos] = useState(0);\n  const [bnbPriceUSD, setBnbPriceUSD] = useState(0);\n  const [totalCompanies, setTotalCompanies] = useState(0);\n  const [totalInvested, setTotalInvested] = useState(0);\n  const [ceos, setCeos] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const [ceoInfo, setCeoInfo] = useState({});\n  const [index, setIndex] = useState(false);\n  const [chain, setChain] = useState({});\n  const [franchisesNumber, setFranchisesNumber] = useState(0);\n\n  let company;\n  let dataFeeds;\n  let mintInstance;\n\n  const mapData = {\n    BZ: 75.0,\n    US: 56.25,\n    AU: 15.45,\n    GB: 25.0,\n    RO: 10.25,\n    GE: 33.25,\n  };\n\n  const companyListener = (block) => {\n    console.log(\"new action emited\")\n\n  }\n\n\n  useEffect(() => {\n    console.log(account,\"gyugyugfy\")\n    if (account) {\n      const res = Params.find((e) => e.chainId == chainId);\n      setChain(res);\n      if (CompanyManagerAddress[chain?.chainIdHex] !== undefined) {\n        company = new library.eth.Contract(\n          companyAbi,\n          CompanyManagerAddress[chain.chainIdHex]\n        );\n\n        dataFeeds = new library.eth.Contract(\n          EACAggregatorProxy,\n          EACAggregatorProxyAddress[chain.chainIdHex]\n        ).methods;\n        getInfo();\n        library.eth.subscribe('newBlockHeaders', () => getInfo())\n      }\n    }\n  }, [account, companyId, chain, chainId]);\n\n  const getInfo = (_) => {\n    company.methods\n      .getTotalCeos()\n      .call()\n      .then((res) => setTotalCeos(res));\n    company.methods\n      .getTotalFranchises()\n      .call()\n      .then((res) => setTotalCompanies(res));\n    company.methods\n      .getTotalInvested()\n      .call()\n      .then((res) =>\n        setTotalInvested(\n          Number(Web3.utils.fromWei(res.toString(), \"ether\")).toFixed(2)\n        )\n      );\n    // company.methods\n    //   .getCEOS()\n    //   .call()\n    //   .then((res) => {\n    //     const companies = [];\n\n\n    //     for (let index = 0; index < res.length; index++) {\n    //       const element = res[index];\n\n    //       company.methods\n    //         .getCompanyId(element)\n    //         .call()\n    //         .then((companiId) => {\n    //           companies.push(companiId)\n    //         }).finally(() => setTotalCompaniesList(companies));\n    //     }\n    //     console.log(totalCompaniesList)\n    //     setCeos(res);\n    //   });\n    company.methods\n      .getCompanyId(account)\n      .call()\n      .then((res) => setCompanyId(res));\n\n    dataFeeds.latestRoundData().call()\n      .then((res) => {\n        setBnbPriceUSD(res)\n      });\n  };\n\n  const mint = () => {\n    // mintInstance = new library.eth.Contract(\n    //   companyAbi,\n    //   CompanyManagerAddress[chain.chainIdHex]\n    // );\n  //   let cost=2;14\n  //   let mintInstance = new Web3.eth.Contract(NFTMinting, '0x7c3a1Eb57f02C3aC1f1A8445F5Df77FD556E9D48', {\n  //     from: account\n  //   });\n  //   mintInstance.methods.mint(2).send().then((balance) => {\n  //     console.log(balance)\n  //  });\n  }\n\n  const onClickSwap = (_) => {\n    toast.success(\"Coming soon!! Stay tunned for info.\", toastSuccessParams);\n  };\n\n  const setShow = (ceo, i) => {\n    setCeoInfo(ceo)\n    setIndex(i)\n    setModalShow(true)\n\n  }\n\n  return (\n    <>\n      <AnimatedPage>\n        <div>\n          <div className=\"row\">\n            <div className=\"col-12 grid-margin mt-5\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                  <div className=\"row\">\n                    <div\n                      className=\"col-sm-8 col-xs-12 mx-auto d-flex flex-column align-items-center\"\n                      style={{\n                        backdropFilter: \"blur(30px)\",\n                      }}\n                    >\n                      {/* <div className=\"row\"> */}\n                      <div className=\"col-sm-6 col-xs-6 mx-auto\">\n                        <div className=\"card-body d-flex flex-column justify-content-center\">\n                          <img className=\"img-mint mx-auto\" src={logo} />\n                        </div>\n                      </div>\n                      <div className=\"col-sm-6 col-xs-6 mx-auto\">\n                        {/* <p className=\"mt-5 text-center\">\n                          You can mint your nft here!\n                        </p> */}\n                        {/* <div>\n                          <p>- Price: 0.30 ${chain.nativeCurrency ? chain.nativeCurrency?.symbol : 'BNB'}</p>\n                        </div> */}\n                        <div className=\"d-flex d-sm-block d-md-flex align-items-center justify-content-around\">\n                          <Form.Control\n                            type=\"number\"\n                            id=\"companies\"\n                            placeholder=\"Number of nfts\"\n                            required\n                            style={{ textAlign: \"center\" }}\n                          />\n                        </div>\n                        <div className=\"d-flex d-sm-block d-md-flex align-items-center justify-content-around\">\n                          <button\n                            type=\"button\"\n                            className=\"btn btn-success mx-auto create-btn mt-3 mb-4 btn-mint\"\n                          >\n                            MINT\n                          </button>\n                        </div>\n                      </div>\n                      {/* </div> */}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </AnimatedPage>\n    </>\n  );\n};\n\nexport default Home;\n"],"sourceRoot":""}